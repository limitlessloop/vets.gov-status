import org.kohsuke.github.GitHub

def PR = 0

def create_pr = {
  def github = GitHub.connect()

  def now = new Date().format('yyyy-MM-dd')
  def update_branch = "refs/heads/master"
  def target_branch = 'refs/heads/production'

  def pr_title = "Automated merge to production branch for ${now}"
  def pr_body = 'Run from Jenkins'

  def repo = github.getRepository('department-of-veterans-affairs/vets.gov-status')

  def pr = repo.createPullRequest(pr_title, update_branch, target_branch, pr_body)

  PR = pr.getNumber()
}

def merge_pr = {
  def github = GitHub.connect()
  def repo = github.getRepository('department-of-veterans-affairs/vets.gov-status')
  def pr = repo.getPullRequest(PR)

  def is_mergeable = true

  // Do basic checks of mergeability
  if (!pr.getMergeable() || pr.getMergeableState() != 'clean') {
    is_mergeable = false
  }

  if (is_mergeable) {
    pr.merge('Merged automatically by Jenkins.')
  } else {
    pr.comment('Skipping merge!')
    echo "Skipping merge. pr.getMergeable() is ${pr.getMergeable()}"
    echo "pr.getMergeableState() is ${pr.getMergeableState()}"
    error("Failed to merge. pr.getMergeableState() is ${pr.getMergeableState()}")
  }
}

pipeline {
  agent {
    label 'vetsgov-general-purpose'
  }
  options {
    ansiColor('xterm')
  }
  stages {

    stage('Create PR'){
      steps {
        script { create_pr() }
      }
    }

    stage ('Wait for PR Status to Update') {
      steps {
        timeout(time: 30, unit: 'MINUTES') {
          waitUntil {
            sleep time: 2, unit: 'MINUTES'
            script {
              def github = GitHub.connect()
              def repo = github.getRepository('department-of-veterans-affairs/vets.gov-status')
              def pr = repo.getPullRequest(PR)
              // See comment in this stage in Jenkinsfile.update for more explanation of the below
              return (pr.getMergeable() != null &&
                  (pr.getMergeableState() == 'behind' ||
                      pr.getMergeableState() == 'blocked' ||
                      pr.getMergeableState() == 'clean' ||
                      pr.getMergeableState() == 'dirty'))
            }
          }
        }
      }
    }

    stage('Create and Merge PR') {
      steps {
        script { merge_pr() }
      }
    }
  }

  post {
    always {
      deleteDir()
    }
    success {
      slackSend message: "Performance dashboard production automerge succeeded", color: "good", channel: "scorecard-ci-temp"
    }
    failure {
      slackSend message: "<!here> Performance dashboard production automerge *FAILED*!", color: "danger", channel: "scorecard-ci-temp"
    }
  }
}
